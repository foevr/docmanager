//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DocumentManager
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// RIA 应用程序的上下文。
    /// </summary>
    /// <remarks>
    /// 此上下文对库进行了扩展，使得应用程序服务和类型
    /// 可供代码和 xaml 使用。
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 WebContext 类的新实例。
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取向当前应用程序注册为生存期对象的上下文。
        /// </summary>
        /// 如果没有当前的应用程序，没有添加上下文或添加了多个上下文，
        /// 则会引发 <exception cref="InvalidOperationException">。
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace DocumentManager.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// 与“DOCMGDomainService”DomainService 相对应的 DomainContext。
    /// </summary>
    public sealed partial class DOCMGDomainContext : DomainContext
    {
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="DOCMGDomainContext"/> 类的新实例。
        /// </summary>
        public DOCMGDomainContext() : 
                this(new WebDomainClient<IDOCMGDomainServiceContract>(new Uri("DocumentManager-Web-DOCMGDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// 用指定的服务 URI 初始化 <see cref="DOCMGDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="serviceUri">DOCMGDomainService 服务 URI。</param>
        public DOCMGDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IDOCMGDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// 用指定的 <paramref name="domainClient"/> 初始化 <see cref="DOCMGDomainContext"/> 类的新实例。
        /// </summary>
        /// <param name="domainClient">要用于此 DomainContext 的 DomainClient 实例。</param>
        public DOCMGDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="DOCMGDomainContext"/> 实例中的 <see cref="RL_USER_FIELD"/> 实体实例的集合。
        /// </summary>
        public EntitySet<RL_USER_FIELD> RL_USER_FIELDs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RL_USER_FIELD>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="DOCMGDomainContext"/> 实例中的 <see cref="TBCONTRACT"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TBCONTRACT> TBCONTRACTs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TBCONTRACT>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="DOCMGDomainContext"/> 实例中的 <see cref="TBFIELD"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TBFIELD> TBFIELDs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TBFIELD>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="DOCMGDomainContext"/> 实例中的 <see cref="TBMODULE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TBMODULE> TBMODULEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TBMODULE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="DOCMGDomainContext"/> 实例中的 <see cref="TBSYSCODE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TBSYSCODE> TBSYSCODEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TBSYSCODE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="DOCMGDomainContext"/> 实例中的 <see cref="TBSYSCODETYPE"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TBSYSCODETYPE> TBSYSCODETYPEs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TBSYSCODETYPE>();
            }
        }
        
        /// <summary>
        /// 获取已加载到此 <see cref="DOCMGDomainContext"/> 实例中的 <see cref="TBUSER"/> 实体实例的集合。
        /// </summary>
        public EntitySet<TBUSER> TBUSERs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TBUSER>();
            }
        }
        
        /// <summary>
        /// 获取一个可使用“GetRL_USER_FIELD”查询加载 <see cref="RL_USER_FIELD"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="RL_USER_FIELD"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<RL_USER_FIELD> GetRL_USER_FIELDQuery()
        {
            this.ValidateMethod("GetRL_USER_FIELDQuery", null);
            return base.CreateQuery<RL_USER_FIELD>("GetRL_USER_FIELD", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTBCONTRACT”查询加载 <see cref="TBCONTRACT"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TBCONTRACT"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TBCONTRACT> GetTBCONTRACTQuery()
        {
            this.ValidateMethod("GetTBCONTRACTQuery", null);
            return base.CreateQuery<TBCONTRACT>("GetTBCONTRACT", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTBFIELD”查询加载 <see cref="TBFIELD"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TBFIELD"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TBFIELD> GetTBFIELDQuery()
        {
            this.ValidateMethod("GetTBFIELDQuery", null);
            return base.CreateQuery<TBFIELD>("GetTBFIELD", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTBMODULE”查询加载 <see cref="TBMODULE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TBMODULE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TBMODULE> GetTBMODULEQuery()
        {
            this.ValidateMethod("GetTBMODULEQuery", null);
            return base.CreateQuery<TBMODULE>("GetTBMODULE", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTBSYSCODE”查询加载 <see cref="TBSYSCODE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TBSYSCODE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TBSYSCODE> GetTBSYSCODEQuery()
        {
            this.ValidateMethod("GetTBSYSCODEQuery", null);
            return base.CreateQuery<TBSYSCODE>("GetTBSYSCODE", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTBSYSCODETYPE”查询加载 <see cref="TBSYSCODETYPE"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TBSYSCODETYPE"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TBSYSCODETYPE> GetTBSYSCODETYPEQuery()
        {
            this.ValidateMethod("GetTBSYSCODETYPEQuery", null);
            return base.CreateQuery<TBSYSCODETYPE>("GetTBSYSCODETYPE", null, false, true);
        }
        
        /// <summary>
        /// 获取一个可使用“GetTBUSER”查询加载 <see cref="TBUSER"/> 实体实例的 EntityQuery 实例。
        /// </summary>
        /// <returns>可以加载以检索 <see cref="TBUSER"/> 实体实例的 EntityQuery。</returns>
        public EntityQuery<TBUSER> GetTBUSERQuery()
        {
            this.ValidateMethod("GetTBUSERQuery", null);
            return base.CreateQuery<TBUSER>("GetTBUSER", null, false, true);
        }
        
        /// <summary>
        /// 为此 DomainContext 的 EntitySets 创建一个新 EntityContainer。
        /// </summary>
        /// <returns>一个新容器实例。</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DOCMGDomainContextEntityContainer();
        }
        
        /// <summary>
        /// 用于“DOCMGDomainService”DomainService 的 Service 协定。　
        /// </summary>
        [ServiceContract()]
        public interface IDOCMGDomainServiceContract
        {
            
            /// <summary>
            /// 异步调用“GetRL_USER_FIELD”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DOCMGDomainService/GetRL_USER_FIELDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DOCMGDomainService/GetRL_USER_FIELD", ReplyAction="http://tempuri.org/DOCMGDomainService/GetRL_USER_FIELDResponse")]
            [WebGet()]
            IAsyncResult BeginGetRL_USER_FIELD(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetRL_USER_FIELD”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetRL_USER_FIELD”返回的 IAsyncResult。</param>
            /// <returns>从“GetRL_USER_FIELD”操作返回的“QueryResult”。</returns>
            QueryResult<RL_USER_FIELD> EndGetRL_USER_FIELD(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTBCONTRACT”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DOCMGDomainService/GetTBCONTRACTDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DOCMGDomainService/GetTBCONTRACT", ReplyAction="http://tempuri.org/DOCMGDomainService/GetTBCONTRACTResponse")]
            [WebGet()]
            IAsyncResult BeginGetTBCONTRACT(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTBCONTRACT”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTBCONTRACT”返回的 IAsyncResult。</param>
            /// <returns>从“GetTBCONTRACT”操作返回的“QueryResult”。</returns>
            QueryResult<TBCONTRACT> EndGetTBCONTRACT(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTBFIELD”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DOCMGDomainService/GetTBFIELDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DOCMGDomainService/GetTBFIELD", ReplyAction="http://tempuri.org/DOCMGDomainService/GetTBFIELDResponse")]
            [WebGet()]
            IAsyncResult BeginGetTBFIELD(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTBFIELD”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTBFIELD”返回的 IAsyncResult。</param>
            /// <returns>从“GetTBFIELD”操作返回的“QueryResult”。</returns>
            QueryResult<TBFIELD> EndGetTBFIELD(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTBMODULE”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DOCMGDomainService/GetTBMODULEDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DOCMGDomainService/GetTBMODULE", ReplyAction="http://tempuri.org/DOCMGDomainService/GetTBMODULEResponse")]
            [WebGet()]
            IAsyncResult BeginGetTBMODULE(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTBMODULE”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTBMODULE”返回的 IAsyncResult。</param>
            /// <returns>从“GetTBMODULE”操作返回的“QueryResult”。</returns>
            QueryResult<TBMODULE> EndGetTBMODULE(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTBSYSCODE”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DOCMGDomainService/GetTBSYSCODEDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DOCMGDomainService/GetTBSYSCODE", ReplyAction="http://tempuri.org/DOCMGDomainService/GetTBSYSCODEResponse")]
            [WebGet()]
            IAsyncResult BeginGetTBSYSCODE(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTBSYSCODE”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTBSYSCODE”返回的 IAsyncResult。</param>
            /// <returns>从“GetTBSYSCODE”操作返回的“QueryResult”。</returns>
            QueryResult<TBSYSCODE> EndGetTBSYSCODE(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTBSYSCODETYPE”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DOCMGDomainService/GetTBSYSCODETYPEDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DOCMGDomainService/GetTBSYSCODETYPE", ReplyAction="http://tempuri.org/DOCMGDomainService/GetTBSYSCODETYPEResponse")]
            [WebGet()]
            IAsyncResult BeginGetTBSYSCODETYPE(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTBSYSCODETYPE”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTBSYSCODETYPE”返回的 IAsyncResult。</param>
            /// <returns>从“GetTBSYSCODETYPE”操作返回的“QueryResult”。</returns>
            QueryResult<TBSYSCODETYPE> EndGetTBSYSCODETYPE(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“GetTBUSER”操作。
            /// </summary>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DOCMGDomainService/GetTBUSERDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DOCMGDomainService/GetTBUSER", ReplyAction="http://tempuri.org/DOCMGDomainService/GetTBUSERResponse")]
            [WebGet()]
            IAsyncResult BeginGetTBUSER(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginGetTBUSER”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginGetTBUSER”返回的 IAsyncResult。</param>
            /// <returns>从“GetTBUSER”操作返回的“QueryResult”。</returns>
            QueryResult<TBUSER> EndGetTBUSER(IAsyncResult result);
            
            /// <summary>
            /// 异步调用“SubmitChanges”操作。
            /// </summary>
            /// <param name="changeSet">要提交的变更集。</param>
            /// <param name="callback">要在完成时调用的回调。</param>
            /// <param name="asyncState">可选的状态对象。</param>
            /// <returns>可用于监视请求的 IAsyncResult。</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DOCMGDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DOCMGDomainService/SubmitChanges", ReplyAction="http://tempuri.org/DOCMGDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// 完成由“BeginSubmitChanges”开始的异步操作。
            /// </summary>
            /// <param name="result">从“BeginSubmitChanges”返回的 IAsyncResult。</param>
            /// <returns>从“SubmitChanges”返回的变更集入口元素的集合。</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DOCMGDomainContextEntityContainer : EntityContainer
        {
            
            public DOCMGDomainContextEntityContainer()
            {
                this.CreateEntitySet<RL_USER_FIELD>(EntitySetOperations.All);
                this.CreateEntitySet<TBCONTRACT>(EntitySetOperations.All);
                this.CreateEntitySet<TBFIELD>(EntitySetOperations.All);
                this.CreateEntitySet<TBMODULE>(EntitySetOperations.All);
                this.CreateEntitySet<TBSYSCODE>(EntitySetOperations.All);
                this.CreateEntitySet<TBSYSCODETYPE>(EntitySetOperations.All);
                this.CreateEntitySet<TBUSER>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// “RL_USER_FIELD”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManager.Web")]
    public sealed partial class RL_USER_FIELD : Entity
    {
        
        private Nullable<int> _authtype;
        
        private int _fieldid;
        
        private EntityRef<TBFIELD> _tbfield;
        
        private EntityRef<TBUSER> _tbuser;
        
        private int _userid;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnAUTHTYPEChanging(Nullable<int> value);
        partial void OnAUTHTYPEChanged();
        partial void OnFIELDIDChanging(int value);
        partial void OnFIELDIDChanged();
        partial void OnUSERIDChanging(int value);
        partial void OnUSERIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="RL_USER_FIELD"/> 类的新实例。
        /// </summary>
        public RL_USER_FIELD()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“AUTHTYPE”值。
        /// </summary>
        [DataMember()]
        public Nullable<int> AUTHTYPE
        {
            get
            {
                return this._authtype;
            }
            set
            {
                if ((this._authtype != value))
                {
                    this.OnAUTHTYPEChanging(value);
                    this.RaiseDataMemberChanging("AUTHTYPE");
                    this.ValidateProperty("AUTHTYPE", value);
                    this._authtype = value;
                    this.RaiseDataMemberChanged("AUTHTYPE");
                    this.OnAUTHTYPEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“FIELDID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int FIELDID
        {
            get
            {
                return this._fieldid;
            }
            set
            {
                if ((this._fieldid != value))
                {
                    this.OnFIELDIDChanging(value);
                    this.RaiseDataMemberChanging("FIELDID");
                    this.ValidateProperty("FIELDID", value);
                    this._fieldid = value;
                    this.RaiseDataMemberChanged("FIELDID");
                    this.OnFIELDIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="TBFIELD"/> 实体。
        /// </summary>
        [Association("TBFIELD_RL_USER_FIELD", "FIELDID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public TBFIELD TBFIELD
        {
            get
            {
                if ((this._tbfield == null))
                {
                    this._tbfield = new EntityRef<TBFIELD>(this, "TBFIELD", this.FilterTBFIELD);
                }
                return this._tbfield.Entity;
            }
            set
            {
                TBFIELD previous = this.TBFIELD;
                if ((previous != value))
                {
                    this.ValidateProperty("TBFIELD", value);
                    if ((previous != null))
                    {
                        this._tbfield.Entity = null;
                        previous.RL_USER_FIELD.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.FIELDID = value.ID;
                    }
                    else
                    {
                        this.FIELDID = default(int);
                    }
                    this._tbfield.Entity = value;
                    if ((value != null))
                    {
                        value.RL_USER_FIELD.Add(this);
                    }
                    this.RaisePropertyChanged("TBFIELD");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="TBUSER"/> 实体。
        /// </summary>
        [Association("TBUSER_RL_USER_FIELD", "USERID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public TBUSER TBUSER
        {
            get
            {
                if ((this._tbuser == null))
                {
                    this._tbuser = new EntityRef<TBUSER>(this, "TBUSER", this.FilterTBUSER);
                }
                return this._tbuser.Entity;
            }
            set
            {
                TBUSER previous = this.TBUSER;
                if ((previous != value))
                {
                    this.ValidateProperty("TBUSER", value);
                    if ((previous != null))
                    {
                        this._tbuser.Entity = null;
                        previous.RL_USER_FIELD.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.USERID = value.ID;
                    }
                    else
                    {
                        this.USERID = default(int);
                    }
                    this._tbuser.Entity = value;
                    if ((value != null))
                    {
                        value.RL_USER_FIELD.Add(this);
                    }
                    this.RaisePropertyChanged("TBUSER");
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        private bool FilterTBFIELD(TBFIELD entity)
        {
            return (entity.ID == this.FIELDID);
        }
        
        private bool FilterTBUSER(TBUSER entity)
        {
            return (entity.ID == this.USERID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._fieldid, this._userid);
        }
    }
    
    /// <summary>
    /// “TBCONTRACT”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManager.Web")]
    public sealed partial class TBCONTRACT : Entity
    {
        
        private int _id;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TBCONTRACT"/> 类的新实例。
        /// </summary>
        public TBCONTRACT()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “TBFIELD”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManager.Web")]
    public sealed partial class TBFIELD : Entity
    {
        
        private string _fieldname;
        
        private int _id;
        
        private EntityCollection<RL_USER_FIELD> _rl_user_field;
        
        private string _tablename;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnFIELDNAMEChanging(string value);
        partial void OnFIELDNAMEChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnTABLENAMEChanging(string value);
        partial void OnTABLENAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TBFIELD"/> 类的新实例。
        /// </summary>
        public TBFIELD()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“FIELDNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string FIELDNAME
        {
            get
            {
                return this._fieldname;
            }
            set
            {
                if ((this._fieldname != value))
                {
                    this.OnFIELDNAMEChanging(value);
                    this.RaiseDataMemberChanging("FIELDNAME");
                    this.ValidateProperty("FIELDNAME", value);
                    this._fieldname = value;
                    this.RaiseDataMemberChanged("FIELDNAME");
                    this.OnFIELDNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="RL_USER_FIELD"/> 实体实例的集合。
        /// </summary>
        [Association("TBFIELD_RL_USER_FIELD", "ID", "FIELDID")]
        [XmlIgnore()]
        public EntityCollection<RL_USER_FIELD> RL_USER_FIELD
        {
            get
            {
                if ((this._rl_user_field == null))
                {
                    this._rl_user_field = new EntityCollection<RL_USER_FIELD>(this, "RL_USER_FIELD", this.FilterRL_USER_FIELD, this.AttachRL_USER_FIELD, this.DetachRL_USER_FIELD);
                }
                return this._rl_user_field;
            }
        }
        
        /// <summary>
        /// 获取或设置“TABLENAME”值。
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string TABLENAME
        {
            get
            {
                return this._tablename;
            }
            set
            {
                if ((this._tablename != value))
                {
                    this.OnTABLENAMEChanging(value);
                    this.RaiseDataMemberChanging("TABLENAME");
                    this.ValidateProperty("TABLENAME", value);
                    this._tablename = value;
                    this.RaiseDataMemberChanged("TABLENAME");
                    this.OnTABLENAMEChanged();
                }
            }
        }
        
        private void AttachRL_USER_FIELD(RL_USER_FIELD entity)
        {
            entity.TBFIELD = this;
        }
        
        private void DetachRL_USER_FIELD(RL_USER_FIELD entity)
        {
            entity.TBFIELD = null;
        }
        
        private bool FilterRL_USER_FIELD(RL_USER_FIELD entity)
        {
            return (entity.FIELDID == this.ID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “TBMODULE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManager.Web")]
    public sealed partial class TBMODULE : Entity
    {
        
        private int _id;
        
        private string _modulepath;
        
        private string _name;
        
        private int _orderindex;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnMODULEPATHChanging(string value);
        partial void OnMODULEPATHChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnORDERINDEXChanging(int value);
        partial void OnORDERINDEXChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TBMODULE"/> 类的新实例。
        /// </summary>
        public TBMODULE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“MODULEPATH”值。
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string MODULEPATH
        {
            get
            {
                return this._modulepath;
            }
            set
            {
                if ((this._modulepath != value))
                {
                    this.OnMODULEPATHChanging(value);
                    this.RaiseDataMemberChanging("MODULEPATH");
                    this.ValidateProperty("MODULEPATH", value);
                    this._modulepath = value;
                    this.RaiseDataMemberChanged("MODULEPATH");
                    this.OnMODULEPATHChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(10)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“ORDERINDEX”值。
        /// </summary>
        [DataMember()]
        public int ORDERINDEX
        {
            get
            {
                return this._orderindex;
            }
            set
            {
                if ((this._orderindex != value))
                {
                    this.OnORDERINDEXChanging(value);
                    this.RaiseDataMemberChanging("ORDERINDEX");
                    this.ValidateProperty("ORDERINDEX", value);
                    this._orderindex = value;
                    this.RaiseDataMemberChanged("ORDERINDEX");
                    this.OnORDERINDEXChanged();
                }
            }
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “TBSYSCODE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManager.Web")]
    public sealed partial class TBSYSCODE : Entity
    {
        
        private int _id;
        
        private string _name;
        
        private int _parentid;
        
        private EntityRef<TBSYSCODETYPE> _tbsyscodetype;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPARENTIDChanging(int value);
        partial void OnPARENTIDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TBSYSCODE"/> 类的新实例。
        /// </summary>
        public TBSYSCODE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“PARENTID”值。
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PARENTID
        {
            get
            {
                return this._parentid;
            }
            set
            {
                if ((this._parentid != value))
                {
                    this.OnPARENTIDChanging(value);
                    this.RaiseDataMemberChanging("PARENTID");
                    this.ValidateProperty("PARENTID", value);
                    this._parentid = value;
                    this.RaiseDataMemberChanged("PARENTID");
                    this.OnPARENTIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置关联的 <see cref="TBSYSCODETYPE"/> 实体。
        /// </summary>
        [Association("TBSYSCODETYPE_TBSYSCODE", "PARENTID", "ID", IsForeignKey=true)]
        [XmlIgnore()]
        public TBSYSCODETYPE TBSYSCODETYPE
        {
            get
            {
                if ((this._tbsyscodetype == null))
                {
                    this._tbsyscodetype = new EntityRef<TBSYSCODETYPE>(this, "TBSYSCODETYPE", this.FilterTBSYSCODETYPE);
                }
                return this._tbsyscodetype.Entity;
            }
            set
            {
                TBSYSCODETYPE previous = this.TBSYSCODETYPE;
                if ((previous != value))
                {
                    this.ValidateProperty("TBSYSCODETYPE", value);
                    if ((previous != null))
                    {
                        this._tbsyscodetype.Entity = null;
                        previous.TBSYSCODE.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PARENTID = value.ID;
                    }
                    else
                    {
                        this.PARENTID = default(int);
                    }
                    this._tbsyscodetype.Entity = value;
                    if ((value != null))
                    {
                        value.TBSYSCODE.Add(this);
                    }
                    this.RaisePropertyChanged("TBSYSCODETYPE");
                }
            }
        }
        
        private bool FilterTBSYSCODETYPE(TBSYSCODETYPE entity)
        {
            return (entity.ID == this.PARENTID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “TBSYSCODETYPE”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManager.Web")]
    public sealed partial class TBSYSCODETYPE : Entity
    {
        
        private int _id;
        
        private string _name;
        
        private EntityCollection<TBSYSCODE> _tbsyscode;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TBSYSCODETYPE"/> 类的新实例。
        /// </summary>
        public TBSYSCODETYPE()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“NAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string NAME
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNAMEChanging(value);
                    this.RaiseDataMemberChanging("NAME");
                    this.ValidateProperty("NAME", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="TBSYSCODE"/> 实体实例的集合。
        /// </summary>
        [Association("TBSYSCODETYPE_TBSYSCODE", "ID", "PARENTID")]
        [XmlIgnore()]
        public EntityCollection<TBSYSCODE> TBSYSCODE
        {
            get
            {
                if ((this._tbsyscode == null))
                {
                    this._tbsyscode = new EntityCollection<TBSYSCODE>(this, "TBSYSCODE", this.FilterTBSYSCODE, this.AttachTBSYSCODE, this.DetachTBSYSCODE);
                }
                return this._tbsyscode;
            }
        }
        
        private void AttachTBSYSCODE(TBSYSCODE entity)
        {
            entity.TBSYSCODETYPE = this;
        }
        
        private void DetachTBSYSCODE(TBSYSCODE entity)
        {
            entity.TBSYSCODETYPE = null;
        }
        
        private bool FilterTBSYSCODE(TBSYSCODE entity)
        {
            return (entity.PARENTID == this.ID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// “TBUSER”实体类。
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/DocumentManager.Web")]
    public sealed partial class TBUSER : Entity
    {
        
        private int _id;
        
        private EntityCollection<RL_USER_FIELD> _rl_user_field;
        
        private string _userid;
        
        private string _username;
        
        private string _userpwd;
        
        #region 可扩展性方法定义

        /// <summary>
        /// 一旦初始化完成便从构造函数中调用此方法，
        /// 还可将此方法用于以后的对象设置。
        ///</summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUSERIDChanging(string value);
        partial void OnUSERIDChanged();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnUSERPWDChanging(string value);
        partial void OnUSERPWDChanged();

        #endregion
        
        
        /// <summary>
        /// 初始化 <see cref="TBUSER"/> 类的新实例。
        /// </summary>
        public TBUSER()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// 获取或设置“ID”值。
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取关联 <see cref="RL_USER_FIELD"/> 实体实例的集合。
        /// </summary>
        [Association("TBUSER_RL_USER_FIELD", "ID", "USERID")]
        [XmlIgnore()]
        public EntityCollection<RL_USER_FIELD> RL_USER_FIELD
        {
            get
            {
                if ((this._rl_user_field == null))
                {
                    this._rl_user_field = new EntityCollection<RL_USER_FIELD>(this, "RL_USER_FIELD", this.FilterRL_USER_FIELD, this.AttachRL_USER_FIELD, this.DetachRL_USER_FIELD);
                }
                return this._rl_user_field;
            }
        }
        
        /// <summary>
        /// 获取或设置“USERID”值。
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string USERID
        {
            get
            {
                return this._userid;
            }
            set
            {
                if ((this._userid != value))
                {
                    this.OnUSERIDChanging(value);
                    this.RaiseDataMemberChanging("USERID");
                    this.ValidateProperty("USERID", value);
                    this._userid = value;
                    this.RaiseDataMemberChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERNAME”值。
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string USERNAME
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnUSERNAMEChanging(value);
                    this.RaiseDataMemberChanging("USERNAME");
                    this.ValidateProperty("USERNAME", value);
                    this._username = value;
                    this.RaiseDataMemberChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }
        
        /// <summary>
        /// 获取或设置“USERPWD”值。
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string USERPWD
        {
            get
            {
                return this._userpwd;
            }
            set
            {
                if ((this._userpwd != value))
                {
                    this.OnUSERPWDChanging(value);
                    this.RaiseDataMemberChanging("USERPWD");
                    this.ValidateProperty("USERPWD", value);
                    this._userpwd = value;
                    this.RaiseDataMemberChanged("USERPWD");
                    this.OnUSERPWDChanged();
                }
            }
        }
        
        private void AttachRL_USER_FIELD(RL_USER_FIELD entity)
        {
            entity.TBUSER = this;
        }
        
        private void DetachRL_USER_FIELD(RL_USER_FIELD entity)
        {
            entity.TBUSER = null;
        }
        
        private bool FilterRL_USER_FIELD(RL_USER_FIELD entity)
        {
            return (entity.USERID == this.ID);
        }
        
        /// <summary>
        /// 根据密钥字段计算可唯一标识此实体实例的值。
        /// </summary>
        /// <returns>唯一标识此实体实例的对象实例。</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
